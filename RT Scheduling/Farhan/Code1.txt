/*************************************************************************
* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.      *
* All rights reserved. All use of this software and documentation is     *
* subject to the License Agreement located at the end of this file below.*
**************************************************************************
* Description:                                                           *
* The following is a simple hello world program running MicroC/OS-II.The *
* purpose of the design is to be a very simple application that just     *
* demonstrates MicroC/OS-II running on NIOS II.The design doesn't account*
* for issues such as checking system call return codes. etc.             *
*                                                                        *
* Requirements:                                                          *
*   -Supported Example Hardware Platforms                                *
*     Standard                                                           *
*     Full Featured                                                      *
*     Low Cost                                                           *
*   -Supported Development Boards                                        *
*     Nios II Development Board, Stratix II Edition                      *
*     Nios Development Board, Stratix Professional Edition               *
*     Nios Development Board, Stratix Edition                            *
*     Nios Development Board, Cyclone Edition                            *
*   -System Library Settings                                             *
*     RTOS Type - MicroC/OS-II                                           *
*     Periodic System Timer                                              *
*   -Know Issues                                                         *
*     If this design is run on the ISS, terminal output will take several*
*     minutes per iteration.                                             *
**************************************************************************/


#include <stdio.h>
#include "includes.h"

#include <stdio.h>
#include "includes.h"
#include "system.h" // IO addresses & IRQs of ports
#include "alt_types.h"
#include "altera_up_avalon_parallel_port.h"
#include "sys/alt_irq.h" //needed only if using interrupts
#define false 0
#define true 1
typedef INT8U bool;

/* Definition of Task Stacks */
#define  TASK_STACKSIZE 2048
OS_STK task1_stk[TASK_STACKSIZE];

/* Definition of Task Priorities */
#define TASK1_PRIORITY      1

INT8U err;
#define CE(x) if ((err = x) != OS_NO_ERR) printf("Runtime error: %d line %d - see ucos_ii.h\n", err, __LINE__);

alt_up_parallel_port_dev *PIO_usecs;
alt_up_parallel_port_dev *HexDisplays3to0;

#define NUM_PROCS 3
#define MIN_PRIORITY 3	// lowest assigned priority to the processes in RMS
int period[NUM_PROCS];	// time in msec of process period = time from enabling to deadline
int priority[NUM_PROCS];// uCOS-II priority assigned from RMS scheduling
bool even_p;			// when true priorities have even offset from MIN_PRIORITY, false odd
int runtime_msecs[NUM_PROCS];		// time the process needs to run to complete for one period
// we alternate even and odd to allow all priorities to be changed at once without overlapping
int next_deadline_msec[NUM_PROCS];	// dynamically updated time that process should have run by
int missed_deadlines[NUM_PROCS];	// number of times a process has exceeded its deadline
int num_finished[NUM_PROCS];		// number of completions of runtime since start
int num_requests[NUM_PROCS];		// number of requests for processing since start
OS_EVENT * SemProcMutex;			// semaphore for mutex on these process data structures

#define USE_SEMAPHORES_NOT_SUSPEND
#ifdef USE_SEMAPHORES_NOT_SUSPEND
	OS_EVENT * SemProcReady[NUM_PROCS];
#endif

OS_STK task_procs_stk[NUM_PROCS][TASK_STACKSIZE];
int me[NUM_PROCS];

/* the RMS scheduler */
/* service time */
int finishtime[NUM_PROCS];
int maxtime[NUM_PROCS]={0,0,0};
int mintime[NUM_PROCS]={100000,100000,100000};
int totaltime[NUM_PROCS]={0,0,0};

void OpenPortDevs(void)
{
	PIO_usecs = alt_up_parallel_port_open_dev("/dev/PIO_usecs");
	if (PIO_usecs == NULL) printf("Failed to open PIO_usecs\n");
	else printf("Opened PIO_usecs\n");
	HexDisplays3to0 = alt_up_parallel_port_open_dev("/dev/HexDisplays3to0");
	if (HexDisplays3to0 == NULL) printf("Failed to open HexDisplays3to0\n");
	else printf("Opened HexDisplays3to0\n");
}

/* Seven segments display */
void DisplaySevenSegments(void)
{
	int hundreds,hundred,tens,ten,units,unit;
	hundreds = (OSCPUUsage/100)%10;
	tens = (OSCPUUsage/10)%10;
	units = OSCPUUsage%10;

	switch(hundreds)
	{
		case 0: hundred = 0x3F; break;
		case 1: hundred = 0x06; break;
		default: hundred = 0x3F;break;
	}
	switch(tens)
	{
		case 0: ten = 0x3F; break;
		case 1: ten = 0x06; break;
		case 2: ten = 0x5B; break;
		case 3: ten = 0x4F; break;
		case 4: ten = 0x66; break;
		case 5: ten = 0x6D; break;
		case 6: ten = 0x7D; break;
		case 7: ten = 0x07; break;
		case 8: ten = 0x7F; break;
		case 9: ten = 0x6F; break;
		default: ten = 0x3F;break;
	}
	switch(units)
	{
		case 0: unit = 0x3F; break;
		case 1: unit = 0x06; break;
		case 2: unit = 0x5B; break;
		case 3: unit = 0x4F; break;
		case 4: unit = 0x66; break;
		case 5: unit = 0x6D; break;
		case 6: unit = 0x7D; break;
		case 7: unit = 0x07; break;
		case 8: unit = 0x7F; break;
		case 9: unit = 0x6F; break;
		default: unit = 0x3F;break;
    }
	//writing to a parallel port
	alt_up_parallel_port_write_data(HexDisplays3to0,(hundred<<16)|(ten<<8)|(unit));
}

static int start_time;
void InitMicrosecs(void)
{
	start_time = alt_up_parallel_port_read_data(PIO_usecs);
	//printf("%ld\n", start_time);
}
int GetMicrosecs(void)
{
	return alt_up_parallel_port_read_data(PIO_usecs)-start_time;
}

/* Busy Delay Function */
void BusyDelay_msec(int msecs)
{
	//Runs for msec milliseconds when no other tasks running and returns
	volatile int i;			//preventing the compiler from caching its value
	int constant = 4013;	//4.090*10^3, msecs=usecs*10^3
	int offset = 12.22;		//12.22,19.95
	int loop = constant*msecs + offset;
	for(i=0;i<loop;i++){}
}

void PeriodicTask(void* pdata)
{
	int task_num = * ((int *)pdata);
	InitMicrosecs();
	while (1)
	{
		int startnow = GetMicrosecs ();
		BusyDelay_msec(runtime_msecs[task_num]);

		finishtime[task_num] = GetMicrosecs()-startnow;
		if(finishtime[task_num] > maxtime[task_num])
			maxtime[task_num]=finishtime[task_num];
		if(finishtime[task_num] < mintime[task_num])
			mintime[task_num]=finishtime[task_num];
		totaltime[task_num]=totaltime[task_num]+finishtime[task_num];

		OSSemPend(SemProcMutex,0,&err); CE(err); // critical section protects shared data
		++num_finished[task_num];
		CE(OSSemPost(SemProcMutex));
		//Blocks if new period has not commenced since scheduler signals SemProcReady when
		// a new period commences
		OSSemPend(SemProcReady[task_num],0,&err); CE(err);

		if(num_requests[0] ==1000){

			      printf("\n CPUUtilisation=%d", OSCPUUsage);
			      printf("\n num_requests[0],[1],[2]:\t%d,\t%d,\t%d",num_requests[0],num_requests[1],num_requests[2]);
			      printf("\n missed_deadlines[0],[1],[2]:\t%d,\t%d,\t%d",missed_deadlines[0],missed_deadlines[1],missed_deadlines[2]);
				  printf("\n num_finished[0],[1],[2]:\t%d,\t%d,\t%d",num_requests[0]-missed_deadlines[0],num_requests[1]-missed_deadlines[1],num_requests[2]-missed_deadlines[2]);
					printf("\n averagetime[0],[1],[2]:\t%d,\t%d,\t%d",totaltime[0]/num_finished[0],totaltime[1]/num_finished[1],totaltime[2]/num_finished[2]);
					printf("\n mintime[0],[1],[2]:\t\t%d,\t%d,\t%d",mintime[0],mintime[1],mintime[2]);
					printf("\n maxtime[0],[1],[2]:\t\t%d,\t%d,\t%d",maxtime[0],maxtime[1],maxtime[2]);
			    	   //printf("\n fintime[0],[1],[2]:\t%f,\t%f,\t%f",fintime[0],fintime[1],fintime[2]);
		}
	}
}

void InitScheduler(void)
{
	// initialise all processes with running tasks, deadlines, missed_deadlines 0, finished[] false
	int i, j;
	int now = OSTimeGet();
	// set up scheduling problem here
	#define SCALE 	1//scale=1,2,5,10
	period[0] = 5*SCALE; runtime_msecs[0] = 2*SCALE;//Period, Execution time
	period[1] = 4*SCALE; runtime_msecs[1] = 1*SCALE;
	period[2] = 9*SCALE; runtime_msecs[2] = 2*SCALE;
	// initialise semaphore for mutex
	SemProcMutex = OSSemCreate(1);

	// initialise datastructures
	for (i=0; i<NUM_PROCS; i++)
	{
		missed_deadlines[i] = 0;
		num_finished[i] = 0;
		num_requests[i] = 1;					//???
		next_deadline_msec[i] = now + period[i];
		priority[i]= 0; // initialisation for assignment below
		me[i] = i; // storage space to pass parameter to task
		SemProcReady[i] = OSSemCreate(0); //???
	}
	// assign priority in order of period
	for (i=0; i<NUM_PROCS; i++)
	{
		int min=-1;
		for (j=0; j<NUM_PROCS; j++)
		{
			if ((min == -1) && (priority[j]==0))
				min = j;
			if ((min != -1) && (priority[j] ==0)&& (period[j] < period[min]))
				min = j;
		}
		priority[min] = i*2 + MIN_PRIORITY;
	}
	even_p = true;
	// create processes
	for (i=0; i<NUM_PROCS; i++)
	{
		CE(OSTaskCreateExt(PeriodicTask,
					(void *)&me[i], // parameter = process index
					(void *)&task_procs_stk[i][TASK_STACKSIZE-1],
					priority[i], priority[i],
					&task_procs_stk[i][0],
					TASK_STACKSIZE,
					NULL,
					0));
	}
}

void ScheduleProcs(void)
{
	//schedule processes and update process stats every timer interrupt = 1 msec
	int i, j;
	int now_msec = OSTimeGet();
	bool deadlines_changed;
	OSSemPend(SemProcMutex,0,&err); CE(err); // critical section to protect shared data between tasks
	deadlines_changed = false;
	for (i=0; i<NUM_PROCS; i++)
	{
		if (now_msec >= next_deadline_msec[i])
		{	//entering new period
			if ( num_requests[i]>(missed_deadlines[i] +num_finished[i]))
				++missed_deadlines[i];
			next_deadline_msec[i] =  period[i] +now_msec;//???
			deadlines_changed = true;
			++num_requests[i];
			//ensure that process priority[i] is ready to run since the start of its new period
			OSSemPost(SemProcReady[i]); CE(err);
		}
	}
//	#define EDF_SCHEDULING // if not EDF then RMS implemented
	#ifdef EDF_SCHEDULING
		if (!deadlines_changed)
		{
			CE(OSSemPost(SemProcMutex));
			return;
		}
		// assign priority in order of deadlines
		int new_priority[NUM_PROCS];
		for (i=0; i<NUM_PROCS; i++)
		{
			new_priority[i] = 0;
		}
		for (i=0; i<NUM_PROCS; i++)
		{
			int min=-1;
			for (j=0; j<NUM_PROCS; j++)
			{
				if ((min == -1) && (new_priority[j]==0))
					min = j;
				if ((min != -1) && (new_priority[j] ==0)&& (next_deadline_msec[j] < next_deadline_msec[min]))
					min = j;
			}
			new_priority[min] = i*2 + MIN_PRIORITY;
			if (even_p) // currently even so make new ones odd to avoid overlap
				new_priority[min] += 1;
		}
		even_p = !even_p;

		// Change priorities
		for (i=0; i<NUM_PROCS; i++)
		{
			CE(OSTaskChangePrio(priority[i], new_priority[i]));
			priority[i] = new_priority[i];
		}
	#endif
	OSSemPost(SemProcMutex);
}

void task1(void* pdata)
{
	OSStatInit();	//initialising the statistic task
	InitScheduler();
	while (1)
	{
		ScheduleProcs();
		DisplaySevenSegments();
		OSTimeDly(1);// 1 msec
		//test_delay_msec(1);
	}
}

/* The main function creates two task and starts multi-tasking */
int main(void)
{
	OpenPortDevs(); //open the device first!!!
	//test_delay_msec(1);
	OSTaskCreateExt(task1,
	                  NULL,
	                  (void *)&task1_stk[TASK_STACKSIZE-1],
	                  TASK1_PRIORITY,
	                  TASK1_PRIORITY,
	                  task1_stk,
	                  TASK_STACKSIZE,
	                  NULL,
	                  0);
	OSStart();
	return 0;
}

/******************************************************************************
*                                                                             *
* License Agreement                                                           *
*                                                                             *
* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *
* All rights reserved.                                                        *
*                                                                             *
* Permission is hereby granted, free of charge, to any person obtaining a     *
* copy of this software and associated documentation files (the "Software"),  *
* to deal in the Software without restriction, including without limitation   *
* the rights to use, copy, modify, merge, publish, distribute, sublicense,    *
* and/or sell copies of the Software, and to permit persons to whom the       *
* Software is furnished to do so, subject to the following conditions:        *
*                                                                             *
* The above copyright notice and this permission notice shall be included in  *
* all copies or substantial portions of the Software.                         *
*                                                                             *
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  *
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    *
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      *
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     *
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         *
* DEALINGS IN THE SOFTWARE.                                                   *
*                                                                             *
* This agreement shall be governed in all respects by the laws of the State   *
* of California and by the laws of the United States of America.              *
* Altera does not recommend, suggest or require that this reference design    *
* file be used in conjunction or combination with any other product.          *
******************************************************************************/
